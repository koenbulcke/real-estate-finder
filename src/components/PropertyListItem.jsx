/**
 * PropertyListItem.jsx
 *
 * Een enkele ‚Äúkaart‚Äù voor het weergeven van een samenvatting van een woning in een lijst.
 * Kenmerken:
 *   - Rode banner bovenaan met de titel van de woning
 *   - Witte body met:
 *       ‚Ä¢ locatie (met üìç emoji)
 *       ‚Ä¢ prijs in vet rood
 *       ‚Ä¢ beschrijving: standaard ingekort tot 100 tekens, gevolgd door ‚Äú‚Ä¶ Plus‚Äù
 *         en een schakelaar om uit te vouwen (‚ÄúMoins‚Äù) of in te klappen
 *   - Grijze footer met een ‚ÄúVoir d√©tails‚Äù knop die linkt naar /property/:id
 *
 * Gebruikt React‚Äôs useState om lokale `isExpanded` status te beheren voor de ‚ÄúPlus/Moins‚Äù schakelaar.
 *
 * Props:
 *   - property (object) met structuur:
 *       ‚Ä¢ id (nummer of string)
 *       ‚Ä¢ title (string)
 *       ‚Ä¢ location (string)
 *       ‚Ä¢ price (nummer of string)
 *       ‚Ä¢ description (string)
 */

/**
 * Een "property" (woningobject) is een JavaScript-object dat alle relevante informatie bevat
 * over een woning die wordt weergegeven in de applicatie. Dit object wordt als prop
 * doorgegeven aan de PropertyListItem component en heeft de volgende structuur:
 *
 * @typedef {Object} Property
 * @property {number|string} id - Unieke identificatie van de woning, gebruikt voor routing en keying.
 * @property {string} title - De titel of naam van de woning, weergegeven in de rode banner.
 * @property {string} location - De locatie van de woning (stad, adres of regio), getoond met een üìç emoji.
 * @property {number|string} price - De prijs van de woning, vetgedrukt en rood weergegeven.
 * @property {string} description - Een tekstuele beschrijving van de woning. Standaard wordt hiervan
 *   slechts een verkorte versie (eerste 100 tekens) getoond, met de mogelijkheid om deze uit te klappen.
 *
 * Dit object maakt het mogelijk om flexibel en gestructureerd woningdata te beheren en weer te geven
 * binnen de gebruikersinterface van de applicatie.
 */
// PropTypes definities voor PropertyListItem component.
// Hiermee wordt gecontroleerd of de juiste props worden doorgegeven aan de component.
// Dit helpt bij het voorkomen van bugs en maakt de code beter leesbaar en onderhoudbaar.

/**
 * Les props, c‚Äôest quoi?
Les props (abr√©viation de properties) permettent de transmettre des donn√©es 
d'un composant parent √† un composant enfant.
Ce sont des param√®tres qu'un composant re√ßoit et qu'il peut utiliser. 
Cela permet de rendre les composants dynamiques en leur passant diff√©rentes valeurs.

Un composant re√ßoit ses props sous forme d'un objet.

 */

/**
 * PropertyListItem.jsx
 *
 * Single property card showing:
 * - Title (in a red banner)
 * - Location, price (red, bold), and a truncated description (100 chars) with Plus/Moins toggle.
 * - Footer with "Voir d√©tails" Link to `/property/:id`
 */

/**
 * PropertyListItem.jsx
 *
 * Single property card showing:
 * - Title (in a red banner)
 * - Location, price (red, bold), and a truncated description (100 chars) with Plus/Moins toggle.
 * - Footer with "Voir d√©tails" Link to `/property/:id`
 */

/**
 * PropertyListItem.jsx
 *
 * Single property card showing:
 * - Title (in a red banner)
 * - Location, price (red, bold), and a truncated description (100 chars) with Plus/Moins toggle.
 * - Footer with "Voir d√©tails" Link to `/property/:id`
 */
import React from 'react'
import { Link } from 'react-router-dom'
import PropTypes from 'prop-types'

/**
 * PropertyListItem is een React-component die een enkele vastgoedvermelding weergeeft in een kaartstijl.
 *
 * @component
 * @param {Object} props - De eigenschappen die aan de component worden doorgegeven.
 * @param {Object} props.property - Het vastgoedobject dat weergegeven moet worden.
 * @param {string} props.property.id - Unieke identificatie van het vastgoed.
 * @param {string} props.property.title - Titel of naam van het vastgoed.
 * @param {string} props.property.location - Locatie van het vastgoed.
 * @param {number|string} props.property.price - Prijs van het vastgoed.
 * @param {string} props.property.description - Beschrijving van het vastgoed.
 *
 * @description
 * Deze component toont een overzicht van een vastgoedobject, inclusief titel, locatie, prijs en een (inklapbare) beschrijving.
 * De beschrijving wordt standaard ingekort tot 100 tekens, met een knop om de volledige tekst te tonen of te verbergen.
 * Onderaan bevindt zich een knop waarmee de gebruiker naar de detailpagina van het vastgoed kan navigeren.
 *
 * @example
 * <PropertyListItem property={{
 *   id: "1",
 *   title: "Luxe Appartement",
 *   location: "Amsterdam",
 *   price: 350000,
 *   description: "Dit prachtige appartement ligt in het hart van de stad en biedt alle moderne gemakken..."
 * }} />
 */
function PropertyListItem(props) {
  // Now we access `props.property` instead of just `property`
  const [isExpanded, setIsExpanded] = React.useState(false)
  const toggleExpand = () => setIsExpanded(prev => !prev)

  // Build a truncated description from props.property.description

  /**
   * ‚Ä¢ Les props permettent de transmettre des donn√©es entre composants.
   *   ‚Ä¢ Elles ne peuvent pas √™tre modifi√©es dans un composant (lecture seule).
   *   ‚Ä¢ On peut les d√©structurer pour plus de lisibilit√©.
   *   ‚Ä¢ props.children permet d‚Äôinclure du contenu dans un composant.
   * 
  */
  const truncated = props.property.description.substring(0, 100) + '‚Ä¶'

  return (
    <div className="flex flex-col bg-white rounded-lg shadow-md hover:shadow-xl overflow-hidden">
      {/* Header banner */}
      <div className="bg-red-600 p-4">
        <h3 className="text-lg font-semibold text-white">
          {props.property.title}
        </h3>
      </div>

      {/* Body */}
      <div className="flex-grow p-4 space-y-2">
        <p className="text-gray-700">üìç {props.property.location}</p>
        <p className="text-red-600 font-bold">
          ‚Ç¨{Number(props.property.price).toLocaleString()}
        </p>
        <p className="text-gray-600 text-sm">
          {isExpanded ? props.property.description : truncated}
          <button
            onClick={toggleExpand}
            className="ml-1 text-red-600 font-medium hover:underline focus:outline-none"
          >
            {isExpanded ? 'Moins' : 'Plus'}
          </button>
        </p>
      </div>

      {/* Footer */}
      <div className="p-4 bg-gray-50">
        <Link
          to={`/property/${props.property.id}`}
          className="inline-block bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors text-sm font-medium"
        >
          Voir d√©tails
        </Link>
      </div>
    </div>
  )
}

PropertyListItem.propTypes = {
  property: PropTypes.shape({
    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
    title: PropTypes.string.isRequired,
    location: PropTypes.string.isRequired,
    price: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
    description: PropTypes.string.isRequired,
  }).isRequired
}

export default PropertyListItem
